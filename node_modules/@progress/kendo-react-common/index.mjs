/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import * as e from "./tree-utils/itemIdUtils.mjs";
import { ZIndexContext as t, useZIndexContext as p } from "./contexts/ZIndexContext.mjs";
import { BrowserSupportService as a } from "./browser-support.service.mjs";
import { canUseDOM as n } from "./canUseDOM.mjs";
import { canUseRef as l } from "./canUseRef.mjs";
import { classNames as i } from "./classNames.mjs";
import { clone as d, cloneArray as u, cloneDate as I, cloneObject as C, cloneValue as h } from "./clone.mjs";
import { applyTrappedFocus as g, disableNavigatableContainer as b, enableNavigatableContainer as A, firstFocusableChild as v, focusFirstFocusableChild as S, focusLastFocusableChild as D, focusableChildren as F, keepFocusInContainer as T, lastFocusableChild as y } from "./trappedFocus.mjs";
import { FormComponent as N } from "./FormComponent.mjs";
import { getTabIndex as B } from "./getTabIndex.mjs";
import { getter as U } from "./getter.mjs";
import { guid as w } from "./guid.mjs";
import { KEYS as W, Keys as _ } from "./keys.mjs";
import { noop as V } from "./noop.mjs";
import { getScrollbarWidth as K, setScrollbarWidth as Z } from "./scrollbarWidth.mjs";
import { setter as z } from "./setter.mjs";
import { FIELD_REGEX as X, FOCUSABLE_ELEMENTS as Y, FOCUSABLE_ELEMENTS_BASE as q, TABBABLE_ELEMENTS as J } from "./constants/main.mjs";
import { extendDataItem as $, getItemPath as ee, mapTree as oe, mapTreeItem as re } from "./treeDataOperations.mjs";
import { shouldShowValidationUI as pe, validatePackage as me } from "./validate-package.mjs";
import { hasRelativeStackingContext as se } from "./hasRelativeStackingContext.mjs";
import { WatermarkOverlay as xe } from "./watermark/WatermarkOverlay.mjs";
import { dispatchEvent as fe } from "./events/dispatchEvent.mjs";
import { AsyncFocusBlur as ce } from "./hocs/AsyncFocusBlur.mjs";
import { createPropsContext as ue, withPropsContext as Ie } from "./hocs/withPropsContext.mjs";
import { withIdHOC as he } from "./hocs/use-id-hoc.mjs";
import { useDir as ge } from "./hooks/useDir.mjs";
import { useAsyncFocusBlur as Ae } from "./hooks/useAsyncFocusBlur.mjs";
import { useRtl as Se } from "./hooks/useRtl.mjs";
import { useMouse as Fe } from "./hooks/useMouse.mjs";
import { useCustomComponent as ye } from "./hooks/useCustomComponent.mjs";
import { usePropsContext as Ne } from "./hooks/usePropsContext.mjs";
import { COLLECTION_ACTION as Be, useCollection as Pe } from "./hooks/useCollection.mjs";
import { useDocument as ke } from "./hooks/useDocument.mjs";
import { useWindow as Me } from "./hooks/useWindow.mjs";
import { useId as _e } from "./hooks/use-id.mjs";
import { useIsomorphicLayoutEffect as Ve } from "./hooks/use-isomorphic-layout-effect.mjs";
import { Icon as Ke } from "./icons/Icon.mjs";
import { SvgIcon as je } from "./icons/SvgIcon.mjs";
import { IconWrap as Ge } from "./icons/IconWrap.mjs";
import { IconsContext as Ye } from "./icons/IconsContext.mjs";
import { svgIconPropType as Je, toIconClass as Qe, toIconName as $e } from "./icons/utils.mjs";
import { Typography as oo } from "./typography/Typography.mjs";
import { DragAndDrop as to } from "./drag-n-drop/index.mjs";
import { Draggable as mo } from "./Draggable.mjs";
import { Droppable as so } from "./Droppable.mjs";
import { useDraggable as xo } from "./hooks/useDraggable.mjs";
import { useDroppable as fo } from "./hooks/useDroppable.mjs";
import { kendoThemeMaps as co } from "./theme.mjs";
import { memoizeOne as Io } from "./memoize.mjs";
import { Navigation as ho } from "./navigation.mjs";
import { getActiveElement as go, getInnerActiveElement as bo } from "./getActiveElement.mjs";
import { TreeFieldsService as vo } from "./tree-utils/FieldsService.mjs";
import { SortedPublicItemIds as Do } from "./tree-utils/SortedPublicItemIds.mjs";
import { addItem as To, areAllDirectChildrenChecked as yo, getAllDirectIndirectChildrenIds as Lo, getAllParents as No, hasChildren as Oo, isEnabledAndAllParentsEnabled as Bo, isItemExpandedAndWithChildren as Po, removeItem as Uo, resolveItemId as ko, resolveItemsIds as wo, updateItem as Mo } from "./tree-utils/itemUtils.mjs";
import { getNestedValue as _o, isArray as Ro } from "./tree-utils/misc.mjs";
import { RowHeightService as Ho } from "./rowHeightService.mjs";
export {
  ce as AsyncFocusBlur,
  a as BrowserSupportService,
  Be as COLLECTION_ACTION,
  to as DragAndDrop,
  mo as Draggable,
  so as Droppable,
  X as FIELD_REGEX,
  Y as FOCUSABLE_ELEMENTS,
  q as FOCUSABLE_ELEMENTS_BASE,
  N as FormComponent,
  Ke as Icon,
  Ge as IconWrap,
  Ye as IconsContext,
  W as KEYS,
  _ as Keys,
  ho as Navigation,
  Ho as RowHeightService,
  Do as SortedPublicItemIds,
  je as SvgIcon,
  J as TABBABLE_ELEMENTS,
  vo as TreeFieldsService,
  oo as Typography,
  xe as WatermarkOverlay,
  t as ZIndexContext,
  To as addItem,
  g as applyTrappedFocus,
  yo as areAllDirectChildrenChecked,
  n as canUseDOM,
  l as canUseRef,
  i as classNames,
  d as clone,
  u as cloneArray,
  I as cloneDate,
  C as cloneObject,
  h as cloneValue,
  ue as createPropsContext,
  b as disableNavigatableContainer,
  fe as dispatchEvent,
  A as enableNavigatableContainer,
  $ as extendDataItem,
  v as firstFocusableChild,
  S as focusFirstFocusableChild,
  D as focusLastFocusableChild,
  F as focusableChildren,
  go as getActiveElement,
  Lo as getAllDirectIndirectChildrenIds,
  No as getAllParents,
  bo as getInnerActiveElement,
  ee as getItemPath,
  _o as getNestedValue,
  K as getScrollbarWidth,
  B as getTabIndex,
  U as getter,
  w as guid,
  Oo as hasChildren,
  se as hasRelativeStackingContext,
  Ro as isArray,
  Bo as isEnabledAndAllParentsEnabled,
  Po as isItemExpandedAndWithChildren,
  T as keepFocusInContainer,
  co as kendoThemeMaps,
  y as lastFocusableChild,
  oe as mapTree,
  re as mapTreeItem,
  Io as memoizeOne,
  V as noop,
  Uo as removeItem,
  ko as resolveItemId,
  wo as resolveItemsIds,
  Z as setScrollbarWidth,
  z as setter,
  pe as shouldShowValidationUI,
  Je as svgIconPropType,
  Qe as toIconClass,
  $e as toIconName,
  e as treeIdUtils,
  Mo as updateItem,
  Ae as useAsyncFocusBlur,
  Pe as useCollection,
  ye as useCustomComponent,
  ge as useDir,
  ke as useDocument,
  xo as useDraggable,
  fo as useDroppable,
  _e as useId,
  Ve as useIsomorphicLayoutEffect,
  Fe as useMouse,
  Ne as usePropsContext,
  Se as useRtl,
  Me as useWindow,
  p as useZIndexContext,
  me as validatePackage,
  he as withIdHOC,
  Ie as withPropsContext
};
